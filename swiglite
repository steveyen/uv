#!/usr/bin/env ruby

# Poor man's lite SWIG.
#
# Please use a language-specific ./swiglite-LANG, which will use
# this helper code.  The code parses a generic C header file.
#
# license   : Apache 2.0
# copyright : Couchbase, Inc., 2011.
#
def name_kind(curr)
  first_parts = curr[0].split(' ').
                        select {|x| x != "extern" and
                                    x != "__const" }
  case first_parts[0]
    when 'typedef'
      if curr[-1] == ')' and
         curr.count {|x| x == '(' } > 1
        # Example: typedef void (*uv_close_cb)(uv_handle_t* handle);
        return curr[curr.index('(') + 1], first_parts[0], 'function'
      end

      # Example: typedef enum { ...} name_of_enum;
      return curr[-1].split(' ')[-1], 'enum' if first_parts[1] == 'enum'

      # Example: typedef struct uv_req_s uv_req_t;
      return curr[-1].split(' ')[-1], first_parts[0]

    when 'struct', 'union', 'enum'
      # Example: struct cmsghdr
      # Example: struct cmsghdr{int foo; int bar}
      return first_parts[-1], first_parts[0]

    else
      if curr.include?('(')
        # Example: void uv_init();
        return first_parts[-1], 'function',
               first_parts[0..-2]
      end

      print "ERROR: unknown name/type for #{curr.join("><")}\n"
      exit(-1)
  end
end

def enum_values(curr)
  res = []
  lhs = curr.index('{') + 1
  rhs = curr.index('}') - 1
  vals = curr[lhs..rhs]
  vals.each do |e|
    e.split(',').each do |v|
      v = v.split('=')[0].strip
      res << v
    end
  end
  return res
end

def arg_parts(arg, arg_i)
  p = arg.gsub('*', ' * ').squeeze(' ').strip.split(' ')
  q = p.select {|x| x != 'struct' and
                    x != 'const' and
                    x != '*' }
  p << "arg_#{arg_i}" if q.length < 2
  arg_type = p[0..-2].select {|x| x != 'const' }
  arg_name = p[-1]
  return arg_type, arg_name
end

def args_names(args)
  arg_i = 0
  args.map do |arg|
    arg_type, arg_name = arg_parts(arg, arg_i)
    arg_i = arg_i + 1
    arg_name
  end
end

# ---------------------------------------------

def parse(src)
  kinds = {}
  curr  = []
  parts = src.split(/([\;\{\}\(\)])/)

  parts.each do |part|
    if part
      part = part.strip.gsub("\n", " ").squeeze(" \n\t")
      if part != ""
        if part == ";" and
           curr.count {|x| x == "{" } == curr.count {|x| x == "}" }
          n, k = name_kind(curr)
          if n.nil? or k.nil?
            print "\n\nERROR: missing name in #{curr.join("><")}\n"
            exit(-1)
          end

          n = n.gsub('*', '')

          kinds[k] ||= {}
          if kinds[k][n]
            print("ERROR: duplicate name: #{n}, for kind: #{k}," \
                  " in: #{curr.join('><')}," \
                  " previously: #{KINDS[k][n].join('><')}\n")
          end

          kinds[k][n] = curr

          curr = []
        else
          curr << part
        end
      end
    end
  end

  return kinds
end

